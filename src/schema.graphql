enum ProductType {
  Premarket
  Primary
  Resale
}

type productRate {
  sellerFee: Float
  buyerFee: Float
  productType: ProductType
}

input productRateInput {
  sellerFee: Float
  buyerFee: Float
  productType: ProductType!
}
input BankDetailsInput {
  sortCode: String
  accountNumber: String
  accountName: String
  paymentReferences: String
  isPlatformInfo: Boolean!
  alias: String
  bankName: String
}

input filtersInput {
  rateType: ProductType
  rateValue: String
}

type ProductCount {
  premarket: Int
  primary: Int
  resale: Int
  total: Int
}

type ProductPayments {
  totalPayments: Float
  platformFees: Float
}

type TotalTrades {
  buy: Int
  sell: Int
  monthlyTrend: [Int]
}

"Platform and user bank details"
type BankDetails implements Node {
  _id: ID!
  sortCode: String
  accountNumber: String
  accountName: String
  paymentReferences: String
  isPlatformInfo: Boolean
  accountId: ID
  alias: String
  bankName: String
}

type BankDetailsEdge implements NodeEdge {
  "The cursor that represents this node in the paginated results"
  cursor: ConnectionCursor!

  "The Transaction"
  node: BankDetails
}

type BankDetailsConnection {
  "The list of nodes that match the query, wrapped in an edge to provide a cursor string for each"
  edges: [BankDetailsEdge]

  """
  You can request the `nodes` directly to avoid the extra wrapping that `NodeEdge` has,
  if you know you will not need to paginate the results.
  """
  nodes: [BankDetails]

  "Information to help a client request the next or previous page"
  pageInfo: PageInfo!

  "The total number of nodes that match your query"
  totalCount: Int!
}

type totalUsers {
  subscribed: Int
  nonSubscribed: Int
}

type DashboardStats {
  productCount: ProductCount
  totalRevenue: Float
  productPayments: ProductPayments
  totalTrades: TotalTrades
  totalUsers: totalUsers
}

type RevenueData {
  totalRevenue: Float
  revenueChange: Float
  revenueChangePercentage: Float
  monthlyRevenue: [Float]
}

type NetContributions {
  Deposits: Float
  Withdrawals: Float
  total: Float
}

type Portfolio {
  netContributions: NetContributions
  amountInvested: Float
  totalCost: Float
  unrealisedCapitalGain: Float
  dividendsReceived: Float
  realisedCapitalGain: Float
  realisedPerformance: Float
  performance: Float
  currentValueArray: [Float]
  investedValueArray: [Float]
}

type PerformanceData {
  date: String
  value: Float
}

enum paymentsFilter {
  month
  year
}

extend type Query {
  getPropertyRates(filter: filtersInput): Float
  propertyPayments(filter: paymentsFilter!): ProductPayments
  adminDashboardStats: DashboardStats
  revenueStats(year: Int!): RevenueData
  portfolio: Portfolio
  platformBankDetails: BankDetails
  userBanks(
    "optional search query"
    searchQuery: String

    "Return only results that come after this cursor. Use this with `first` to specify the number of results to return."
    after: ConnectionCursor

    "Return only results that come before this cursor. Use this with `last` to specify the number of results to return."
    before: ConnectionCursor

    "Return at most this many results. This parameter may be used with either `after` or `offset` parameters."
    first: ConnectionLimitInt

    "Return at most this many results. This parameter may be used with the `before` parameter."
    last: ConnectionLimitInt

    "Return only results that come after the Nth result. This parameter may be used with the `first` parameter."
    offset: Int

    "Return results sorted in this order"
    sortOrder: SortOrder = asc

    "By default, groups are sorted by when they were created, oldest first. Set this to sort by one of the other allowed fields"
    sortBy: AccountSortByField = createdAt
  ): BankDetailsConnection!
}

extend type Mutation {
  createProductRate(input: productRateInput!): Boolean
  updateBankDetails(input: BankDetailsInput!): Boolean
  removeBank(bankId: ID!): Boolean
}
