enum ProductType {
  Premarket
  Primary
  Resale
}

type productRate {
  sellerFee: Float
  buyerFee: Float
  productType: ProductType
}

input productRateInput {
  sellerFee: Float
  buyerFee: Float
  productType: ProductType!
}
input bankDetailsInput {
  sortCode: String
  accountNumber: String
  accountName: String
  paymentReferences: String
  isPlatformInfo: Boolean!
  shopId: ID!
}

input filtersInput {
  rateType: ProductType
  rateValue: String
}

type ProductCount {
  premarket: Int
  primary: Int
  resale: Int
  total: Int
}

type ProductPayments {
  totalPayments: Float
  platformFees: Float
}

type TotalTrades {
  buy: Int
  sell: Int
  monthlyTrend: [Int]
}

type bankDetails {
  sortCode: String
  accountNumber: String
  accountName: String
  paymentReferences: String
  isPlatformInfo: Boolean
  accountId: ID
}

type totalUsers {
  subscribed: Int
  nonSubscribed: Int
}

type DashboardStats {
  productCount: ProductCount
  totalRevenue: Float
  productPayments: ProductPayments
  totalTrades: TotalTrades
  totalUsers: totalUsers
}

type RevenueData {
  totalRevenue: Float
  revenueChange: Float
  revenueChangePercentage: Float
  monthlyRevenue: [Float]
}

type NetContributions {
  Deposits: Float
  Withdrawals: Float
  total: Float
}

type Portfolio {
  netContributions: NetContributions
  amountInvested: Float
  totalCost: Float
  unrealisedCapitalGain: Float
  dividendsReceived: Float
  realisedCapitalGain: Float
  realisedPerformance: Float
  performance: Float
  currentValueArray: [Float]
  investedValueArray: [Float]
}

type PerformanceData {
  date: String
  value: Float
}

enum paymentsFilter {
  month
  year
}

extend type Query {
  getPropertyRates(filter: filtersInput): Float
  propertyPayments(filter: paymentsFilter!): ProductPayments
  adminDashboardStats: DashboardStats
  revenueStats(year: Int!): RevenueData
  portfolio: Portfolio
  platformBankDetails: bankDetails
  fetchBankDetails: bankDetails
  

}

extend type Mutation {
  createProductRate(input: productRateInput!): Boolean
  updateBankDetails(input: bankDetailsInput!): Boolean
}
